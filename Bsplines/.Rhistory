f1 = f2
# Re-evaluate uk and f(uk)
uk = lower + gamma*(upper - lower)
f2 = FUN(uk)
}
# Calculate new I
I = abs(upper - lower)
if (trace){
vals <- paste(format(it, width = 3), format(lower, nsmall = 1, width = 10),
format(lk, nsmall = 1, width = 10), format(uk, nsmall = 1, width = 10),
format(upper, nsmall = 1, width = 10), sprintf("%10.3f", FUN(lower)),
sprintf("%10.3f", f1), sprintf("%10.3f", f2),
sprintf("%10.3f", FUN(upper)), sprintf("%10.3f\n", I),
sep = " |")
cat(vals)
}
}
# Output
estimated.minimizer = lower
}
obj=function(x) {2*x[1]^2+x[2]^2-x[1]*x[2]-x[2]}
obj_dash=function(x) {c(4*x[1]-x[2],2*x[2]-x[1]-1)}
obj_ddash=function(x){matrix(c(4,-1,-1,2),nrow=2)}
x=newton(obj,obj_dash,obj_ddash,c(0,1),tol=1e-06,trace=TRUE)
newton <- function(FUN, df, H, x, tol = 1e-06, trace = FALSE, maxit = 20){
# loop under converge or maxit
for (i in 1:maxit){
# calculate hessian at point
M <- H(x)
# get eigen value
Eig <- eigen(M)$values
# check if semi-positive definite condition for marquardt
if (any(Eig <= 0)){
# modify M by Marquardt
mu <- max(1, 1.5*abs(min(Eig)))
M <- H(x) + mu * diag(length(x))
# print infomration
cat(paste("It. ", i, ", Marquardt: lambda = ", abs(min(Eig)), "\n"))
}
# get step size
d = solve(M, -df(x))
# define linesearch function
g <- function(z) { FUN(x + d*z) }
# implement golden section linesearch
l <- golden(0, 1, g, tol = tol)
# update x
x_old <- x
x <- x_old + l*d
# break if x values converge
if (norm(x - x_old, type = "2") < tol) break
# print information for current step
if (trace){
cat(format(i, width = 3),"| t(k-1) = ",
format(x_old, digits = 4, nsmall = 3, width = 8), "| f\'(tk) = ",
format(df(x_old), digits = 2, nsmall = 3, width = 8), "| l = ",
format(l, digit = 2, nsmall = 3, width = 6), "| d = ",
format(d, digits = 2, nsmall = 3, width = 8), "| tk = ",
format(x, digtis = 4, nsmall = 3, width = 8), "| f(tk) = ",
format(FUN(x), digits = 2, nsmall = 4, width = 8), "\n")
}
}
# output x
x
}
obj2=function(x){(1/12)*x[1]^4-x[1]^2+x[2]^2-2*x[1]*x[2]-2*x[1]}
obj2_dash=function(x){c((1/3)*x[1]^3-2*x[1]-2*x[2]-2,2*x[2]-2*x[1])}
obj2_ddash=function(x){matrix(c(x[1]^2-2,-2,-2,2),nrow=2)}
x=newton(obj2,obj2_dash,obj2_ddash,c(1,0),tol=1e-06,trace=TRUE)
newton <- function(FUN, df, H, x, tol = 1e-06, trace = FALSE, maxit = 20){
# loop under converge or maxit
for (i in 1:maxit){
# calculate hessian at point
M <- H(x)
# get eigen value
Eig <- eigen(M)$values
# check if semi-positive definite condition for marquardt
if (any(Eig <= 0)){
# modify M by Marquardt
mu <- max(1, 1.5*abs(min(Eig)))
M <- H(x) + mu * diag(length(x))
# print infomration
cat(paste("It. ", i, ", Marquardt: lambda = ", abs(min(Eig)), "\n"))
}
# get step size
d = solve(M, -df(x))
# define linesearch function
g <- function(z) { FUN(x + d*z) }
# implement golden section linesearch
l <- golden(0, 1, g, tol = tol)
# update x
x_old <- x
x <- x_old + l*d
# break if x values converge
if (norm(x - x_old, type = "2") < tol) break
# print information for current step
if (trace){
cat(format(i, width = 3),"| t(k-1) = ",
format(x_old, digits = 4, nsmall = 3, width = 6), "| f\'(tk) = ",
format(df(x_old), digits = 2, nsmall = 3, width = 8), "| l = ",
format(l, digit = 2, nsmall = 3, width = 6), "| d = ",
format(d, digits = 2, nsmall = 3, width = 8), "| tk = ",
format(x, digtis = 4, nsmall = 3, width = 8), "| f(tk) = ",
format(FUN(x), digits = 2, nsmall = 4, width = 8), "\n")
}
}
# output x
x
}
```{r}
obj2=function(x){(1/12)*x[1]^4-x[1]^2+x[2]^2-2*x[1]*x[2]-2*x[1]}
obj2_dash=function(x){c((1/3)*x[1]^3-2*x[1]-2*x[2]-2,2*x[2]-2*x[1])}
obj2_ddash=function(x){matrix(c(x[1]^2-2,-2,-2,2),nrow=2)}
x=newton(obj2,obj2_dash,obj2_ddash,c(1,0),tol=1e-06,trace=TRUE)
filelist[[1]][randlist, ]
test = list(10)
test
test = list()
test
test[[1]] = 5
test
test[1] = 5
test
head(clean)
head(train_Data)
head(train_data)
summary(glm.fit)
system('ssh gqia189@sc-cer00014-04.its.auckland.ac.nz')
system('ssh gqia189@sc-cer00014-04.its.auckland.ac.nz\n password2019')
system('ssh gqia189@sc-cer00014-04.its.auckland.ac.nz \n password2019')
system('ssh gqia189@sc-cer00014-04.its.auckland.ac.nz') system('password2019')
system('ssh gqia189@sc-cer00014-04.its.auckland.ac.nz')
system('password2019')
obj=function(x) {2*x[1]^2+x[2]^2-x[1]*x[2]-x[2]}
obj_dash=function(x) {c(4*x[1]-x[2],2*x[2]-x[1]-1)}
dir=c(0.707,-0.707)
X=c(0,1)
g =  obj_dash(X)
g
getStep = function(z) {obj(X+z*dir)}
getStep()
getStep
dir
t(dir)
m <- dir %*% g
m
dir
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 10, trace = FALSE){
m <- dir %*% g
t = -c * m
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
alpha = tau * alpha
}
alpha
}
backTrack(getstep, g, dir)
getStep = function(z) {obj(X+z*dir)}
backTrack(getStep, g, dir)
m <- dir %*% g
m
t <- -.9*m
t
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
alpha = tau * alpha
}
alpha
}
backTrack(getStep, g, dir)
debug(backTrack)
backTrack(getStep, g, dir)
m
alpha
getstep(alpha)
t*alpha
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"))
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10))
}
}
alpha = tau * alpha
k = k + 1
alpha
}
backTrack(getStep, g, dir)
backTrack(getStep, g, dir, trace = TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
}
alpha = tau * alpha
k = k + 1
alpha
}
backTrack(getStep, g, dir, trace = TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
}
}
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (getstep(x) - getstep(x + alpha*dir) < alpha*t){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
}
}
backTrack(getStep, g, dir, trace = TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getstep(x) - getstep(x + alpha*dir) >= alpha*t)
}
}
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getstep(x) - getstep(x + alpha*dir) >= alpha*t) break
}
}
backTrack(getStep, g, dir, trace = TRUE)
x
getStep(X)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getstep(X) - getstep(X + alpha*dir) >= alpha*t) break
}
alpha
}
backTrack(getStep, g, dir, trace = TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getstep(x) - getstep(x + alpha*dir) >= alpha*t) break
}
alpha
}
backTrack(getStep, g, dir, trace = TRUE)
rm(ls = list())
rm(list = ls())
obj=function(x) {2*x[1]^2+x[2]^2-x[1]*x[2]-x[2]}
obj_dash=function(x) {c(4*x[1]-x[2],2*x[2]-x[1]-1)}
dir=c(0.707,-0.707) > X=c(0,1)
g =  obj_dash(X)
getStep = function(z) {obj(X+z*dir)}
obj=function(x) {2*x[1]^2+x[2]^2-x[1]*x[2]-x[2]}
obj_dash=function(x) {c(4*x[1]-x[2],2*x[2]-x[1]-1)}
dir=c(0.707,-0.707)
X=c(0,1)
g =  obj_dash(X)
getStep = function(z) {obj(X+z*dir)}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getstep(x) - getstep(x + alpha*dir) >= alpha*t) break
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
getstep(X)
getStep(X)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
alpha
if (getStep(x) - getStep(X + alpha*dir) >= alpha*t) break
}
alpha
}
debug(backTrack)
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
m
t
alpha
getStep(alpha)
getStep(x) - getStep(X + alpha*dir)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
if (getStep(X) - getStep(X + alpha*dir) >= alpha*t) break
}
alpha
}
debug(backTrack)
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
getStep(X) - getStep(X + alpha*dir)
alpha*t
getStep(X) - getStep(X + alpha*dir)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
if (obj(X) - getStep(X) >= alpha*t) break
}
alpha
}
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
while (TRUE){
if (trace){
cat(format("k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
if (obj(X) - getStep(X) >= alpha*t) break
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
if (trace){
cat(format("  k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
}
while (TRUE){
if (trace){
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
if (obj(X) - getStep(X) >= alpha*t) break
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getstep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
if (trace){
cat(format("  k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
}
while (obj(X) - getStep(X) < alpha*t){
if (trace){
cat(format(k, width = 3), format(alpha, width = 10), format(getstep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getStep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
if (trace){
cat(format("  k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
}
while (obj(X) - getStep(X) < alpha*t){
if (trace){
cat(format(k, width = 3), format(alpha, width = 10), format(getStep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
}
alpha
}
obj=function(x) {2*x[1]^2+x[2]^2-x[1]*x[2]-x[2]}
obj_dash=function(x) {c(4*x[1]-x[2],2*x[2]-x[1]-1)}
dir=c(0.707,-0.707)
X=c(0,1)
g =  obj_dash(X)
getStep = function(z) {obj(X+z*dir)}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getStep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
if (trace){
cat(format("  k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
}
while (obj(X) - obj(X + alpha*dir) < alpha*t){
if (trace){
cat(format(k, width = 3), format(alpha, width = 10), format(getStep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
alpha = tau * alpha
k = k + 1
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
backTrack <- function(getStep, g, dir, tau = 0.75, c = 0.9, alpha = 100, trace = FALSE){
m <- dir %*% g
t = -c * m
k = 0
if (trace){
cat(format("  k", width = 3), sprintf("%10s", "alpha"), sprintf("%10s", "f(alpha)"), sprintf("%10s", "t*alpha"), "\n")
cat(format(k, width = 3), format(alpha, width = 10), format(getStep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
while (obj(X) - obj(X + alpha*dir) < alpha*t){
alpha = tau * alpha
k = k + 1
if (trace){
cat(format(k, width = 3), format(alpha, width = 10), format(getStep(alpha), width = 10), format(t*alpha, width = 10), "\n")
}
}
alpha
}
x=backTrack(getStep,g,dir,alpha=100,trace=TRUE)
X=prestige.df;X=cbind(X,1)
library(MBA)
data(LIDAR)
View(LIDAR)
min(LIDAR)
setwd("~/Documents/GitHub/p4p/Bsplines")
write.csv('ptcdata')
write.csv('ptcdata', LIDAR)
write.csv(LIDAR, 'ptcdata.csv')
